Listing record ownership for all sections
=========================================================================================================
var owner = await listingManager.BranchesOwnerAsync(branches.BranchID, branches.ListingID, userGuid);
if (owner == true)
{
    if (ModelState.IsValid)
    {
        try
        {
            listingContext.Update(listing);
            await listingContext.SaveChangesAsync();
            
            // Shafi: Create last updated
            string ipAddress = this.HttpContext.Connection.RemoteIpAddress.ToString();
            string userAgent = this.HttpContext.Request.Headers["User-Agent"];
            string referUrl = this.HttpContext.Request.Headers["Referer"];
            string visitedURL = this.HttpContext.Request.Headers["Host"];
            string userGuid = user.Id;
            string email = user.Email;
            string mobile = user.PhoneNumber;
            DateTime timeZoneDate = TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, TimeZoneInfo.FindSystemTimeZoneById("India Standard Time"));
            string updatedDate = timeZoneDate.ToString("d-MM-yyyy");
            string updatedTime = timeZoneDate.ToString("hh:mm:ss tt");
            string updatedUrl = this.HttpContext.Request.Headers["Host"] + "/Subscriptions/Listings/Edit/" + listing.ListingID;
            string activity = "Updated listing details " + listing.CompanyName + " with id " + listing.ListingID;

            // Shafi: Get user in roles
            IList<string> userInRoleName = await userManager.GetRolesAsync(user);
            string roleName = userInRoleName.FirstOrDefault();
            // End:

            await audit.CreateListingLastUpdatedAsync(listing.ListingID, userGuid, email, mobile, ipAddress, roleName, "Company", updatedDate, updatedTime, updatedUrl, userAgent, activity);
            // End:
            }
            catch (DbUpdateConcurrencyException)
            {
            if (!ListingExists(listing.ListingID))
            {
                return NotFound();
            }
            else
            {
                throw;
            }
    }
            
    return RedirectToAction("Index", "Listings", "Subscriptions");
    
    }
}
else
{
    return NotFound();
}

return View(shafi: model [listing/communcation/branches etc.]);


