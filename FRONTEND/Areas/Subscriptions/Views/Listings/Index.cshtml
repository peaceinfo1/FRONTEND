@model IEnumerable<BOL.VIEWMODELS.FreeListingViewModel>
@inject ICategory categoryRepo
@inject IAddresses addressRepo
@inject IListingManager listingRepo

@{
    ViewData["Title"] = "Manage Listings";
    Layout = "~/Views/Shared/Dashboard/_UserDashboard.cshtml";
    ViewData["RowCount"] = Model.Count();
    var listingCount = Model.Count();
}
<!-- Begin: Breadcrumb -->
@{
    ViewData["BC-1"] = "Subscriptions";
    ViewData["BC-2"] = "Listings";
    ViewData["BC-3"] = ViewData["Title"];
    ViewData["BT-Text"] = "Add New Listing";
    ViewData["BT-Link"] = "/Subscriptions/Listings/Create";
    ViewData["BT-Text2"] = "Manage Listings";
    ViewData["BT-Link2"] = "/Subscriptions/Listings/Index";
}
<!-- End: -->
<!-- Begin: Create history -->
@await Component.InvokeAsync("UserHistory", "Visited my listing page.")
<!-- End: -->

<h5>@ViewData["Title"]<span class="float-right">Total : @ViewData["RowCount"]</span></h5>
<hr />

@(Html
    .Grid(Model)
    .Build(columns =>
    {
        columns.Add(model => $"<div style='width:280px;'><a href=\"/SubscriptionsEdit/Listings/Edit/{model.Listing.ListingID}\" class='btn btn-sm btn-secondary mr-2'>Edit</a> <a href=\"url-goes-here\" class='btn btn-sm btn-info mr-2'>Approve</a> <a href=\"url-goes-here\" class='btn btn-sm btn-danger mr-2'>Disapprove</a><a href=\"url-goes-here\" class='btn btn-sm btn-purple mr-2'>Claim</a></div>").Encoded(false).Titled("Actions");
        columns.Add(model => $"<div style='width:500px;'><a href='/Listing/Index/{model.Listing.ListingID}' target='_blank'>{model.Listing.CompanyName}</a><div class='float-right'><a href='/Subscriptions/ListingDashboard/{model.Listing.ListingID}' target='_blank'><i class='mr-2 fa fa-eye' style='color:#0F53EA;'></i></a> {(model.Communication.Website != null ? $"<a href='{model.Communication.Website}' target='_blank'><i class='mr-2 fa fa-globe' style='color:#0F53EA;'></i></a>" : "<i class='mr-2 fa fa-globe' style='color:#B3B3B3;'></i>")} <img src='/img/Free-Member-Icon.png' style='width:15px;' /></div></div>").Titled("Company").Filterable(true).Sortable(true).Encoded(false);
        //columns.Add(model => (categoryRepo.SecondCategoryName(model.Categories.SecondCategoryID))).Titled("Second Category").Filterable(true).Sortable(true);
        //columns.Add(model => (categoryRepo.FirstCategoryName(model.Categories.FirstCategoryID))).Titled("First Category").Filterable(true).Sortable(true);
        //columns.Add(model => model.Listing.Approved).Titled("Approved").Filterable(true).Sortable(true);
        //columns.Add(model => model.Listing.Rejected).Titled("Rejected").Filterable(true).Sortable(true);
        columns.Add(model => model.Communication.Mobile).Titled("Mobile").Filterable(true).Sortable(true);
        //columns.Add(model => (addressRepo.pincode(model.Address.PincodeID))).Titled("Pincode").Filterable(true).Sortable(true);
        //columns.Add(model => (addressRepo.AssemblyName(model.Address.AssemblyID))).Titled("Assembly").Filterable(true).Sortable(true);
        //columns.Add(model => (addressRepo.CityName(model.Address.City))).Titled("City").Filterable(true).Sortable(true);
        //columns.Add(model => (addressRepo.StateName(model.Address.StateID))).Titled("State").Filterable(true).Sortable(true);
        //columns.Add(model => (addressRepo.CountryName(model.Address.CountryID))).Titled("Country").Filterable(true).Sortable(true);
    }) 
    .Filterable()
    .Sortable()
    .Pageable(pager =>
    {
        pager.PageSizes = new Dictionary<Int32, String> { { 10, "10" }, { 50, "50" }, { 75, "75" }, { 100, "100" }, { 0, "All" } };
        pager.ShowPageSizes = true;
        pager.PagesToDisplay = 3;
        pager.CurrentPage = 1;
        pager.RowsPerPage = 10;
    })
    .Using(GridFilterMode.Row)
    .Empty("No data found")
)